/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (GENAPI_API_KEY)
 * 2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É test-images
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: node test-generation.js
 */

require('dotenv').config();
const fs = require('fs-extra');
const path = require('path');
const GenAPIService = require('./services/genapi');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
const TEST_DIR = path.join(__dirname, 'test-images');
const OUTPUT_DIR = path.join(__dirname, 'test-output');
fs.ensureDirSync(TEST_DIR);
fs.ensureDirSync(OUTPUT_DIR);

// –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–∞–ø–∫–µ test-images)
const TEST_IMAGE = 'test.jpg'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
const TEST_IMAGE_PATH = path.join(TEST_DIR, TEST_IMAGE);

async function runTest() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (!fs.existsSync(TEST_IMAGE_PATH)) {
      console.error(`‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${TEST_IMAGE_PATH}`);
      console.log('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞–ø–∫—É test-images');
      return;
    }

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞...');
    const genapi = new GenAPIService();
    console.log('‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

    console.log(`üì∑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${TEST_IMAGE}`);
    
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 3D –º–æ–¥–µ–ª–∏...');
    const startTime = Date.now();
    
    const result = await genapi.generate3DModel(TEST_IMAGE_PATH);
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${duration.toFixed(2)} —Å–µ–∫—É–Ω–¥`);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:');
    console.log(JSON.stringify(result, null, 2));
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å URL –º–æ–¥–µ–ª–∏, –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å
    if (result.output && result.output.model_url) {
      const modelUrl = result.output.model_url;
      const modelFileName = `model-${Date.now()}.glb`;
      const modelFilePath = path.join(OUTPUT_DIR, modelFileName);
      
      console.log(`üíæ –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å: ${modelUrl}`);
      await genapi.downloadResult(modelUrl, modelFilePath);
      console.log(`‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${modelFilePath}`);
    } else {
      console.log('‚ö†Ô∏è URL –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API');
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞:');
    console.error(error);
    
    if (error.response) {
      console.error('üì° –û—Ç–≤–µ—Ç API:');
      console.error(error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runTest();
