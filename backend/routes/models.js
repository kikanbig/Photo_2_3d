const express = require('express');
const router = express.Router();
const Model3D = require('../models/Model3D');
const { Op } = require('sequelize');
const path = require('path');
const fs = require('fs-extra');

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏
router.get('/', async (req, res) => {
  try {
    const { status = 'active', limit = 100, offset = 0 } = req.query;

    const models = await Model3D.findAll({
      where: {
        status: status
      },
      order: [['createdAt', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    const total = await Model3D.count({
      where: { status: status }
    });

    res.json({
      success: true,
      data: models,
      pagination: {
        total,
        limit: parseInt(limit),
        offset: parseInt(offset)
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –º–æ–¥–µ–ª—å –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;

    const model = await Model3D.findByPk(id);

    if (!model) {
      return res.status(404).json({
        success: false,
        error: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    res.json({
      success: true,
      data: {
        ...model.toJSON(),
        glbFile: undefined // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –°–∫–∞—á–∞—Ç—å GLB —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –∏–∑ –ë–î
router.get('/:id/download', async (req, res) => {
  try {
    const { id } = req.params;

    const model = await Model3D.findOne({
      where: { taskId: id }, // –ò—â–µ–º –ø–æ taskId
      attributes: ['glbFile', 'name']
    });

    if (!model || !model.glbFile) {
      return res.status(404).send('GLB —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    res.setHeader('Content-Type', 'model/gltf-binary');
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Content-Disposition', `inline; filename="${model.name || 'model'}.glb"`);
    res.send(model.glbFile);
    
    console.log(`üì§ GLB —Ñ–∞–π–ª –æ—Ç–¥–∞–Ω –∏–∑ –ë–î: ${id}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è GLB:', error);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞');
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å)
router.post('/', async (req, res) => {
  try {
    const {
      name,
      description,
      modelUrl,
      previewImageUrl,
      originalImageUrl,
      dimensions,
      taskId,
      metadata
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!modelUrl) {
      return res.status(400).json({
        success: false,
        error: 'modelUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, —á–∏—Ç–∞–µ–º –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    let glbFileBuffer = null;
    if (modelUrl.startsWith('/uploads/models/')) {
      try {
        const filePath = path.join(__dirname, '..', modelUrl);
        if (await fs.pathExists(filePath)) {
          glbFileBuffer = await fs.readFile(filePath);
          console.log(`üì¶ GLB —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: ${(glbFileBuffer.length / 1024 / 1024).toFixed(2)} MB`);
        }
      } catch (err) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å GLB —Ñ–∞–π–ª:', err.message);
      }
    }

    const model = await Model3D.create({
      name: name || 'Untitled Model',
      description,
      modelUrl: taskId ? `/api/models/${taskId}/download` : modelUrl, // URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ –ë–î –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π
      glbFile: glbFileBuffer, // –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
      previewImageUrl,
      originalImageUrl,
      dimensions,
      taskId,
      metadata,
      status: 'active'
    });

    console.log(`‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞: ${model.id} - ${model.name}`);
    if (glbFileBuffer) {
      console.log(`üíæ GLB —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î: ${(glbFileBuffer.length / 1024 / 1024).toFixed(2)} MB`);
    }

    res.status(201).json({
      success: true,
      data: {
        ...model.toJSON(),
        glbFile: undefined // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const {
      name,
      description,
      dimensions,
      status,
      metadata
    } = req.body;

    const model = await Model3D.findByPk(id);

    if (!model) {
      return res.status(404).json({
        success: false,
        error: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    if (name !== undefined) model.name = name;
    if (description !== undefined) model.description = description;
    if (dimensions !== undefined) model.dimensions = dimensions;
    if (status !== undefined) model.status = status;
    if (metadata !== undefined) model.metadata = metadata;

    await model.save();

    console.log(`‚úÖ –ú–æ–¥–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${model.id}`);

    res.json({
      success: true,
      data: model
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å (soft delete)
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { hard = false } = req.query;

    const model = await Model3D.findByPk(id);

    if (!model) {
      return res.status(404).json({
        success: false,
        error: '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }

    if (hard === 'true') {
      // –ñ—ë—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
      await model.destroy();
      console.log(`üóëÔ∏è –ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞: ${id}`);
    } else {
      // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å)
      model.status = 'deleted';
      await model.save();
      console.log(`üì¶ –ú–æ–¥–µ–ª—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: ${id}`);
    }

    res.json({
      success: true,
      message: hard === 'true' ? '–ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞' : '–ú–æ–¥–µ–ª—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π
router.get('/search', async (req, res) => {
  try {
    const { q, status = 'active' } = req.query;

    if (!q) {
      return res.status(400).json({
        success: false,
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∏—Å–∫–∞ q –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    const models = await Model3D.findAll({
      where: {
        status: status,
        [Op.or]: [
          { name: { [Op.iLike]: `%${q}%` } },
          { description: { [Op.iLike]: `%${q}%` } }
        ]
      },
      order: [['createdAt', 'DESC']],
      limit: 50
    });

    res.json({
      success: true,
      data: models,
      count: models.length
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

module.exports = router;

