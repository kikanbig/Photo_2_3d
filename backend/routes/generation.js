const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs-extra');
const { v4: uuidv4 } = require('uuid');
const GenAPIService = require('../services/genapi');
const { scaleGLB } = require('../services/glb-scaler');

const router = express.Router();
const genapiService = new GenAPIService();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ—É—Ç–∞
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(process.env.UPLOAD_DIR || 'uploads', 'input'));
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: parseInt(process.env.MAX_FILE_SIZE) || 10 * 1024 * 1024
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = /jpeg|jpg|png|gif|webp/;
    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
    const mimetype = allowedTypes.test(file.mimetype);
    
    if (mimetype && extname) {
      return cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'));
    }
  }
});

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á - –∏—Å–ø–æ–ª—å–∑—É–µ–º JSON —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
const tasksFilePath = path.join(process.env.UPLOAD_DIR || 'uploads', 'tasks.json');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
let tasks = new Map();
try {
  if (fs.existsSync(tasksFilePath)) {
    const tasksData = JSON.parse(fs.readFileSync(tasksFilePath, 'utf8'));
    tasks = new Map(Object.entries(tasksData));
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tasks.size} –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞`);
  }
} catch (error) {
  console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞:', error.message);
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
function saveTasks() {
  try {
    const tasksData = Object.fromEntries(tasks);
    fs.writeFileSync(tasksFilePath, JSON.stringify(tasksData, null, 2));
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á:', error.message);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
router.post('/upload', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
    }

    const taskId = uuidv4();
    const imagePath = req.file.path;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    let dimensions = null;
    if (req.body.dimensions) {
      try {
        dimensions = JSON.parse(req.body.dimensions);
        console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –†–∞–∑–º–µ—Ä—ã –æ–±—ä–µ–∫—Ç–∞:`, dimensions);
      } catch (e) {
        console.warn(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã:`, e);
      }
    }

    console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Ñ–∞–π–ª–∞: ${imagePath}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    tasks.set(taskId, {
      id: taskId,
      status: 'processing',
      imagePath: imagePath,
      dimensions: dimensions,
      createdAt: new Date(),
      result: null,
      error: null
    });

    console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏: ${tasks.size}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª
    saveTasks();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    generate3DModelAsync(taskId, imagePath);

    res.json({
      success: true,
      taskId: taskId,
      message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
router.get('/status/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;
    
    console.log(`[–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞] –ó–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–¥–∞—á–∏: ${taskId}. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${tasks.size}`);
    
    const task = tasks.get(taskId);

    if (!task) {
      console.log(`[–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞] –ó–∞–¥–∞—á–∞ ${taskId} –ù–ï –ù–ê–ô–î–ï–ù–ê! –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:`, Array.from(tasks.keys()));
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    console.log(`[–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞] –ó–∞–¥–∞—á–∞ ${taskId} –Ω–∞–π–¥–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: ${task.status}`);

    res.json({
      success: true,
      task: {
        id: task.id,
        status: task.status,
        createdAt: task.createdAt,
        result: task.result,
        error: task.error
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    res.status(500).json({ error: error.message });
  }
});

// –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
router.get('/download/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;
    const task = tasks.get(taskId);

    if (!task) {
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    if (task.status !== 'completed') {
      return res.status(400).json({ error: '–ó–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
    }

    if (!task.result || !task.result.filePath) {
      return res.status(404).json({ error: '–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const filePath = task.result.filePath;
    
    if (!await fs.pathExists(filePath)) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    res.download(filePath, `3d_model_${taskId}.glb`);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GenAPI
router.get('/user-info', async (req, res) => {
  try {
    const userInfo = await genapiService.getUserInfo();
    res.json({
      success: true,
      user: userInfo
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
    res.status(500).json({ error: error.message });
  }
});

// –û—Ç–ª–∞–¥–∫–∞: –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
router.get('/debug/tasks', async (req, res) => {
  try {
    const allTasks = Array.from(tasks.entries()).map(([id, task]) => ({
      id,
      status: task.status,
      createdAt: task.createdAt,
      hasResult: !!task.result,
      hasError: !!task.error
    }));
    
    res.json({
      success: true,
      totalTasks: tasks.size,
      tasks: allTasks
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á:', error);
    res.status(500).json({ error: error.message });
  }
});

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏
async function generate3DModelAsync(taskId, imagePath) {
  try {
    const task = tasks.get(taskId);
    if (!task) return;

    console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 3D –º–æ–¥–µ–ª–∏...`);
    
    // PRESET_ULTIMATE: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π, —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ 3D –ø–µ—á–∞—Ç–∏
    const response = await genapiService.generate3DModel(imagePath, {
      is_sync: true,
      ss_guidance_strength: 8.5,     // –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      ss_sampling_steps: 50,         // –ú–ê–ö–°–ò–ú–£–ú: 50 —à–∞–≥–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
      slat_guidance_strength: 4.0,   // –í—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏
      slat_sampling_steps: 50,       // –ú–ê–ö–°–ò–ú–£–ú: 50 —à–∞–≥–æ–≤ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
      mesh_simplify: 0.98,           // –ú–ê–ö–°–ò–ú–£–ú: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ —Å–µ—Ç–∫–∏
      texture_size: 2048             // –ú–ê–ö–°–ò–ú–£–ú: 2K —Ç–µ–∫—Å—Ç—É—Ä—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–π —á–µ—Ç–∫–æ—Å—Ç–∏
    });
    
    console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:`, JSON.stringify(response, null, 2));
    
    if (response && response.request_id) {
      console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ü–æ–ª—É—á–µ–Ω request_id: ${response.request_id}, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞`);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º long-pooling –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
      await pollTaskStatus(taskId, response.request_id);
    } else if (response && response.status === 'success' && response.output && response.output.model_url) {
      console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É. URL –º–æ–¥–µ–ª–∏: ${response.output.model_url}`);
      // –ü–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É (is_sync=true)
      const resultUrl = response.output.model_url;
      
      // –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
      const outputDir = path.join(process.env.UPLOAD_DIR || 'uploads', 'temp');
      await fs.ensureDir(outputDir);

      const tempPath = path.join(outputDir, `${taskId}.glb`);
      await genapiService.downloadResult(resultUrl, tempPath);

      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
      const glbBuffer = await fs.readFile(tempPath);
      console.log(`üì¶ GLB –ø—Ä–æ—á–∏—Ç–∞–Ω: ${(glbBuffer.length / 1024 / 1024).toFixed(2)} MB`);

      // üîÑ –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú GLB –í 2 –†–ê–ó–ê (–ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ)
      console.log('üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º GLB —Ñ–∞–π–ª –≤ 2 —Ä–∞–∑–∞...');
      const scaledGLBBuffer = scaleGLB(glbBuffer, 2.0);
      console.log(`‚úÖ GLB –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω: ${(scaledGLBBuffer.length / 1024 / 1024).toFixed(2)} MB`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GLB –≤ –ë–î
      const Model3D = require('../models/Model3D');
      await Model3D.create({
        name: `Model ${taskId}`,
        modelUrl: `/api/models/${taskId}/download`,
        glbFile: scaledGLBBuffer,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä!
        originalImageUrl: `/uploads/input/${path.basename(imagePath)}`, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        taskId: taskId,
        status: 'active'
      });
      console.log(`üíæ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GLB —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏: ${taskId}`);

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await fs.remove(tempPath);

      // URL –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const apiModelUrl = `/api/models/${taskId}/download`;

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
      task.status = 'completed';
      task.result = {
        url: apiModelUrl, // URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ –ë–î
        externalUrl: resultUrl, // –í–Ω–µ—à–Ω–∏–π URL –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
        downloadedAt: new Date(),
        modelUrl: apiModelUrl // URL –¥–ª—è model-viewer
      };
      tasks.set(taskId, task);
      saveTasks();

      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. URL: ${apiModelUrl}`);
    } else {
      console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API:`, JSON.stringify(response, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ API –≤–µ—Ä–Ω—É–ª –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ JSON)
      if (typeof response === 'string' && response.includes('<!DOCTYPE html>')) {
        throw new Error('API –≤–µ—Ä–Ω—É–ª HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ JSON. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏–ª–∏ URL API.');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –º–æ–¥–µ–ª–∏ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–∞
      if (response && typeof response === 'object') {
        // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ URL –º–æ–¥–µ–ª–∏ –≤ –ª—é–±–æ–º –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞
        const findModelUrl = (obj) => {
          if (!obj || typeof obj !== 'object') return null;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å URL –º–æ–¥–µ–ª–∏
          for (const key of ['model_url', 'url', 'result', 'output']) {
            if (obj[key] && typeof obj[key] === 'string' && obj[key].startsWith('http')) {
              return obj[key];
            } else if (obj[key] && typeof obj[key] === 'object') {
              const nestedUrl = findModelUrl(obj[key]);
              if (nestedUrl) return nestedUrl;
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞
          for (const key in obj) {
            if (obj[key] && typeof obj[key] === 'object') {
              const nestedUrl = findModelUrl(obj[key]);
              if (nestedUrl) return nestedUrl;
            }
          }
          
          return null;
        };
        
        const modelUrl = findModelUrl(response);
        if (modelUrl) {
          console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ù–∞–π–¥–µ–Ω URL –º–æ–¥–µ–ª–∏ –≤ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç–≤–µ—Ç–∞: ${modelUrl}`);
          
          // –°–∫–∞—á–∏–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
          const outputDir = path.join(process.env.UPLOAD_DIR || 'uploads', 'temp');
          await fs.ensureDir(outputDir);
          
          const tempPath = path.join(outputDir, `${taskId}.glb`);
          await genapiService.downloadResult(modelUrl, tempPath);
          
          // –ß–∏—Ç–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
          const glbBuffer = await fs.readFile(tempPath);
          console.log(`üì¶ GLB –ø—Ä–æ—á–∏—Ç–∞–Ω: ${(glbBuffer.length / 1024 / 1024).toFixed(2)} MB`);
          
          // üîÑ –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú GLB –í 2 –†–ê–ó–ê (–ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ)
          console.log('üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º GLB —Ñ–∞–π–ª –≤ 2 —Ä–∞–∑–∞...');
          const scaledGLBBuffer = scaleGLB(glbBuffer, 2.0);
          console.log(`‚úÖ GLB –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω: ${(scaledGLBBuffer.length / 1024 / 1024).toFixed(2)} MB`);

          const Model3D = require('../models/Model3D');
          await Model3D.create({
            name: `Model ${taskId}`,
            modelUrl: `/api/models/${taskId}/download`,
            glbFile: scaledGLBBuffer,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä!
            originalImageUrl: `/uploads/input/${path.basename(imagePath)}`, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            taskId: taskId,
            status: 'active'
          });
          console.log(`üíæ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GLB —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏: ${taskId}`);
          
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          await fs.remove(tempPath);
          
          const apiModelUrl = `/api/models/${taskId}/download`;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
          task.status = 'completed';
          task.result = {
            url: apiModelUrl,
            externalUrl: modelUrl,
            downloadedAt: new Date(),
            modelUrl: apiModelUrl
          };
          tasks.set(taskId, task);
          saveTasks();
          
          console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç). URL: ${apiModelUrl}`);
          return;
        }
      }
      
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –º–æ–¥–µ–ª–∏');
    }

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}:`, error);
    
    const task = tasks.get(taskId);
    if (task) {
      task.status = 'failed';
      task.error = error.message;
      tasks.set(taskId, task);
    }
  }
}

// –û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
async function pollTaskStatus(taskId, requestId) {
  const task = tasks.get(taskId);
  if (!task) return;

  const maxAttempts = 60; // –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç (60 * 5 —Å–µ–∫—É–Ω–¥)
  let attempts = 0;

  console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è request_id: ${requestId}`);

  const poll = async () => {
    try {
      attempts++;
      console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞...`);
      
      const statusResponse = await genapiService.checkTaskStatus(requestId);
      console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] ===== –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –û–¢ API =====`);
      console.log(JSON.stringify(statusResponse, null, 2));
      console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] ===== –ö–û–ù–ï–¶ –û–¢–í–ï–¢–ê =====`);
      
      if (statusResponse.status === 'success') {
        // –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        // GenAPI –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö: output, result, full_response
        let resultUrl = null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ result (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π)
        if (statusResponse.result) {
          if (Array.isArray(statusResponse.result) && statusResponse.result.length > 0) {
            resultUrl = statusResponse.result[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
          } else if (typeof statusResponse.result === 'string') {
            resultUrl = statusResponse.result;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ result, –ø—Ä–æ–≤–µ—Ä—è–µ–º output
        if (!resultUrl && statusResponse.output) {
          const output = statusResponse.output;
          if (typeof output === 'string' && output.startsWith('http')) {
            resultUrl = output;
          } else if (output && typeof output === 'object') {
            resultUrl = output.model_url || output.url || output.glb || output.file;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ output, –ø—Ä–æ–≤–µ—Ä—è–µ–º full_response
        if (!resultUrl && statusResponse.full_response && Array.isArray(statusResponse.full_response)) {
          const firstResponse = statusResponse.full_response[0];
          if (firstResponse && firstResponse.url) {
            resultUrl = firstResponse.url;
          }
        }
        
        if (resultUrl) {
          console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] –ù–∞–π–¥–µ–Ω URL –º–æ–¥–µ–ª–∏: ${resultUrl}`);
          
          // –°–∫–∞—á–∏–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
          const outputDir = path.join(process.env.UPLOAD_DIR || 'uploads', 'temp');
          await fs.ensureDir(outputDir);
          
          const tempPath = path.join(outputDir, `${taskId}.glb`);
          await genapiService.downloadResult(resultUrl, tempPath);
          
          // –ß–∏—Ç–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
          const glbBuffer = await fs.readFile(tempPath);
          console.log(`üì¶ GLB –ø—Ä–æ—á–∏—Ç–∞–Ω: ${(glbBuffer.length / 1024 / 1024).toFixed(2)} MB`);

          // üîÑ –ú–ê–°–®–¢–ê–ë–ò–†–£–ï–ú GLB –í 2 –†–ê–ó–ê (–ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –ø–æ–ª–æ–≤–∏–Ω–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ)
          console.log('üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º GLB —Ñ–∞–π–ª –≤ 2 —Ä–∞–∑–∞...');
          const scaledGLBBuffer = scaleGLB(glbBuffer, 2.0);
          console.log(`‚úÖ GLB –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω: ${(scaledGLBBuffer.length / 1024 / 1024).toFixed(2)} MB`);

          const Model3D = require('../models/Model3D');
          await Model3D.create({
            name: `Model ${taskId}`,
            modelUrl: `/api/models/${taskId}/download`,
            glbFile: scaledGLBBuffer,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—É—Ñ–µ—Ä!
            originalImageUrl: `/uploads/input/${path.basename(imagePath)}`, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            taskId: taskId,
            status: 'active'
          });
          console.log(`üíæ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GLB —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏: ${taskId}`);
          
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          await fs.remove(tempPath);
          
          const apiModelUrl = `/api/models/${taskId}/download`;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
          task.status = 'completed';
          task.result = {
            url: apiModelUrl,
            externalUrl: resultUrl,
            downloadedAt: new Date(),
            modelUrl: apiModelUrl
          };
          tasks.set(taskId, task);
          saveTasks();
          
          console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. URL: ${apiModelUrl}`);
        } else {
          console.log(`[–ó–∞–¥–∞—á–∞ ${taskId}] URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:`, JSON.stringify(statusResponse, null, 2));
          throw new Error('URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        }
      } else if (statusResponse.status === 'failed' || statusResponse.status === 'error') {
        // –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π
        task.status = 'failed';
        task.error = statusResponse.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
        tasks.set(taskId, task);
        saveTasks(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        
        console.log(`–ó–∞–¥–∞—á–∞ ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: ${task.error}`);
      } else if (statusResponse.status === 'processing') {
        // –ó–∞–¥–∞—á–∞ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        if (attempts < maxAttempts) {
          setTimeout(poll, 5000); // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        } else {
          // –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
          task.status = 'timeout';
          task.error = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
          tasks.set(taskId, task);
          
          console.log(`–ó–∞–¥–∞—á–∞ ${taskId} –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è`);
        }
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}:`, error);
      
      if (attempts < maxAttempts) {
        setTimeout(poll, 5000);
      } else {
        task.status = 'failed';
        task.error = error.message;
        tasks.set(taskId, task);
      }
    }
  };

  // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(poll, 5000);
}

module.exports = router;
