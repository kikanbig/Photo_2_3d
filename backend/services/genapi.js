const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const FormData = require('form-data');

class GenAPIService {
  constructor() {
    // –û—á–∏—â–∞–µ–º API –∫–ª—é—á –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    this.apiKey = process.env.GENAPI_API_KEY ? process.env.GENAPI_API_KEY.trim() : null;
    this.baseURL = process.env.GENAPI_BASE_URL || 'https://gen-api.ru/api/v1';
    
    if (!this.apiKey) {
      throw new Error('GENAPI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if (!/^[a-zA-Z0-9_-]+$/.test(this.apiKey)) {
      console.warn('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: API –∫–ª—é—á —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã!');
      console.warn('–ö–ª—é—á (hex):', Buffer.from(this.apiKey).toString('hex'));
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getUserInfo() {
    try {
      // –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ç–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
      return {
        balance: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        status: 'active',
        message: 'API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error.response?.data || error.message);
      throw error;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é Trellis
  async generate3DModel(imagePath, options = {}) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!await fs.pathExists(imagePath)) {
        throw new Error(`–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${imagePath}`);
      }
      
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 3D –º–æ–¥–µ–ª–∏...');
      console.log(`–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${imagePath}`);
      console.log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, options);
      
      // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
      const FormData = require('form-data');
      const formData = new FormData();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      const fileExt = path.extname(imagePath).toLowerCase();
      let contentType = 'image/jpeg';
      if (fileExt === '.png') contentType = 'image/png';
      else if (fileExt === '.gif') contentType = 'image/gif';
      else if (fileExt === '.webp') contentType = 'image/webp';
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –ø–æ—Ç–æ–∫
      const fileStream = fs.createReadStream(imagePath);
      formData.append('image_url', fileStream, {
        filename: path.basename(imagePath),
        contentType: contentType,
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      if (options.ss_guidance_strength !== undefined) formData.append('ss_guidance_strength', options.ss_guidance_strength.toString());
      if (options.ss_sampling_steps !== undefined) formData.append('ss_sampling_steps', options.ss_sampling_steps.toString());
      if (options.slat_guidance_strength !== undefined) formData.append('slat_guidance_strength', options.slat_guidance_strength.toString());
      if (options.slat_sampling_steps !== undefined) formData.append('slat_sampling_steps', options.slat_sampling_steps.toString());
      if (options.mesh_simplify !== undefined) formData.append('mesh_simplify', options.mesh_simplify.toString());
      if (options.texture_size !== undefined) formData.append('texture_size', options.texture_size.toString());
      
      console.log('üé® –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
        ss_guidance_strength: options.ss_guidance_strength || 'default',
        ss_sampling_steps: options.ss_sampling_steps || 'default',
        slat_guidance_strength: options.slat_guidance_strength || 'default',
        slat_sampling_steps: options.slat_sampling_steps || 'default',
        mesh_simplify: options.mesh_simplify || 'default',
        texture_size: options.texture_size || 'default'
      });
      
      // –ü–†–ê–í–ò–õ–¨–ù–´–ô URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const apiUrl = 'https://api.gen-api.ru/api/v1/networks/trellis';
      console.log(`URL API: ${apiUrl}`);
      console.log('API –∫–ª—é—á (—á–∞—Å—Ç–∏—á–Ω–æ):', this.apiKey.substring(0, 10) + '...');
      
      try {
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∞–π–ª–æ–º...');
        
        // –û—á–∏—â–∞–µ–º API –∫–ª—é—á –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        const cleanApiKey = this.apiKey.trim();
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ FormData –∏ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º Authorization
        const headers = {
          ...formData.getHeaders(),
          'Authorization': `Bearer ${cleanApiKey}`, // Bearer —Ç–æ–∫–µ–Ω!
          'Accept': 'application/json'
        };
        
        console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', Object.keys(headers));
        console.log('–î–ª–∏–Ω–∞ API –∫–ª—é—á–∞:', cleanApiKey.length);
        
        // –ü–†–ê–í–ò–õ–¨–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const response = await axios.post(apiUrl, formData, {
          headers: headers,
          timeout: 300000, // 5 –º–∏–Ω—É—Ç
          maxContentLength: Infinity,
          maxBodyLength: Infinity,
          onUploadProgress: (progressEvent) => {
            const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: ${percentCompleted}%`);
          }
        });
        
        console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', response.status);
        console.log('–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
        
        return response.data;
      } catch (axiosError) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:', axiosError.message);
        if (axiosError.response) {
          console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', axiosError.response.status);
          console.error('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', typeof axiosError.response.data === 'string' ? axiosError.response.data.substring(0, 500) : axiosError.response.data);
          console.error('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', axiosError.response.headers);
        } else if (axiosError.request) {
          console.error('–ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω');
        }
        throw axiosError;
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏:', error.response?.data || error.message);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  async checkTaskStatus(requestId) {
    try {
      // –ü–†–ê–í–ò–õ–¨–ù–´–ô URL —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: GET https://api.gen-api.ru/api/v1/request/get/{request_id}
      const response = await axios.get(`https://api.gen-api.ru/api/v1/request/get/${requestId}`, {
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'Authorization': `Bearer ${this.apiKey.trim()}`
        }
      });
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error.response?.data || error.message);
      throw error;
    }
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  async downloadResult(resultUrl, outputPath) {
    try {
      const response = await axios.get(resultUrl, {
        responseType: 'stream'
      });

      const writer = fs.createWriteStream(outputPath);
      response.data.pipe(writer);

      return new Promise((resolve, reject) => {
        writer.on('finish', resolve);
        writer.on('error', reject);
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', error.message);
      throw error;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å callback URL
  async generateWithCallback(imagePath, callbackUrl, options = {}) {
    try {
      const imageBuffer = await fs.readFile(imagePath);
      const base64Image = imageBuffer.toString('base64');
      
      const requestData = {
        model: 'trellis',
        image: `data:image/jpeg;base64,${base64Image}`,
        callback_url: callbackUrl,
        ...options
      };

      const response = await axios.post(`${this.baseURL}/generation`, requestData, {
        headers: {
          'Content-Type': 'application/json'
        },
        params: {
          api_key: this.apiKey // –ü–µ—Ä–µ–¥–∞–µ–º API –∫–ª—é—á –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞
        }
      });

      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å callback:', error.response?.data || error.message);
      throw error;
    }
  }
}

module.exports = GenAPIService;
