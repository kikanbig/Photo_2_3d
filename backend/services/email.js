const nodemailer = require('nodemailer');

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è Yandex.Mail (–µ—Å–ª–∏ Gmail –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
const createYandexTransporter = () => {
  console.log('üîß –°–æ–∑–¥–∞–µ–º Yandex SMTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');
  const transporter = nodemailer.createTransport({
    host: 'smtp.yandex.com',
    port: 465,
    secure: true,
    auth: {
      user: process.env.EMAIL_USER, // yandex.ru email
      pass: process.env.EMAIL_APP_PASSWORD // –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Yandex
    },
    connectionTimeout: 10000,
    greetingTimeout: 5000,
    socketTimeout: 10000
  });
  return transporter;
};

// SendGrid —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–Ω–∞–¥–µ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, 100 email/–¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
const createSendGridTransporter = () => {
  console.log('üîß –°–æ–∑–¥–∞–µ–º SendGrid —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç');
  // –î–ª—è SendGrid –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π API –≤—ã–∑–æ–≤ –≤–º–µ—Å—Ç–æ nodemailer
  const sgMail = require('@sendgrid/mail');
  sgMail.setApiKey(process.env.SENDGRID_API_KEY);

  // –°–æ–∑–¥–∞–µ–º nodemailer —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  const transporter = nodemailer.createTransport({
    send: (mail, callback) => {
      const msg = {
        to: mail.data.to,
        from: process.env.EMAIL_USER, // –ò—Å–ø–æ–ª—å–∑—É–µ–º EMAIL_USER –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        subject: mail.data.subject,
        html: mail.data.html || mail.data.text,
      };

      sgMail.send(msg)
        .then(() => callback(null, { messageId: 'sendgrid-' + Date.now() }))
        .catch(callback);
    }
  });

  return transporter;
};

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const createTransporter = () => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gmail SMTP —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_APP_PASSWORD
    },
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    secure: true, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL
    pool: true, // Connection pooling
    maxConnections: 1, // –ú–∞–∫—Å–∏–º—É–º 1 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    maxMessages: 5, // –ú–∞–∫—Å–∏–º—É–º 5 —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    // –¢–∞–π–º–∞—É—Ç—ã
    connectionTimeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    greetingTimeout: 5000,   // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    socketTimeout: 10000     // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–æ–∫–µ—Ç
  });

  return transporter;
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const sendEmail = async ({ to, subject, html, text }) => {
  try {
    console.log(`üìß –ü–û–ü–´–¢–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ email: ${to} - ${subject}`);
    console.log(`   EMAIL_USER: ${process.env.EMAIL_USER}`);
    console.log(`   EMAIL_APP_PASSWORD: ${process.env.EMAIL_APP_PASSWORD ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
    console.log(`   EMAIL_PROVIDER: ${process.env.EMAIL_PROVIDER || 'gmail'}`);

    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä email
    let transporter;
    if (process.env.EMAIL_PROVIDER === 'sendgrid') {
      console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º SendGrid');
      transporter = createSendGridTransporter();
    } else if (process.env.EMAIL_PROVIDER === 'yandex') {
      console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º Yandex.Mail');
      transporter = createYandexTransporter();
    } else {
      console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º Gmail');
      transporter = createTransporter();
    }

    const mailOptions = {
      from: `"Photo to 3D" <${process.env.EMAIL_USER}>`,
      to,
      subject,
      html,
      text: text || html.replace(/<[^>]*>/g, '') // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è text –≤–µ—Ä—Å–∏–∏
    };

    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ Gmail SMTP...`);
    const result = await transporter.sendMail(mailOptions);

    console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${to} - ${subject}`);
    console.log(`   Message ID: ${result.messageId}`);
    console.log(`   Response: ${result.response}`);

    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error.message);
    console.error('   –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
};

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const testEmailConnection = async () => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('‚úÖ Email —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');
    return true;
  } catch (error) {
    console.error('‚ùå Email —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', error.message);
    return false;
  }
};

module.exports = {
  sendEmail,
  testEmailConnection
};
