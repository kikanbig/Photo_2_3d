const nodemailer = require('nodemailer');

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const createTransporter = () => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gmail SMTP (–ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞)
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER, // –í–∞—à Gmail –∞–¥—Ä–µ—Å
      pass: process.env.EMAIL_APP_PASSWORD // App Password, –Ω–µ –æ–±—ã—á–Ω—ã–π –ø–∞—Ä–æ–ª—å
    }
  });

  return transporter;
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const sendEmail = async ({ to, subject, html, text }) => {
  try {
    console.log(`üìß –ü–û–ü–´–¢–ö–ê –æ—Ç–ø—Ä–∞–≤–∫–∏ email: ${to} - ${subject}`);
    console.log(`   EMAIL_USER: ${process.env.EMAIL_USER}`);
    console.log(`   EMAIL_APP_PASSWORD: ${process.env.EMAIL_APP_PASSWORD ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);

    const transporter = createTransporter();

    const mailOptions = {
      from: `"Photo to 3D" <${process.env.EMAIL_USER}>`,
      to,
      subject,
      html,
      text: text || html.replace(/<[^>]*>/g, '') // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è text –≤–µ—Ä—Å–∏–∏
    };

    console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ Gmail SMTP...`);
    const result = await transporter.sendMail(mailOptions);

    console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ: ${to} - ${subject}`);
    console.log(`   Message ID: ${result.messageId}`);
    console.log(`   Response: ${result.response}`);

    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error.message);
    console.error('   –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    throw error;
  }
};

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const testEmailConnection = async () => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('‚úÖ Email —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ');
    return true;
  } catch (error) {
    console.error('‚ùå Email —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', error.message);
    return false;
  }
};

module.exports = {
  sendEmail,
  testEmailConnection
};
