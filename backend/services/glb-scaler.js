const fs = require('fs-extra');

/**
 * –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç GLB –º–æ–¥–µ–ª—å –ø–æ –≤—Å–µ–º –æ—Å—è–º
 * GLB —Ñ–æ—Ä–º–∞—Ç: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0
 * 
 * @param {Buffer} glbBuffer - –∏—Å—Ö–æ–¥–Ω—ã–π GLB —Ñ–∞–π–ª
 * @param {number} scaleFactor - –º–Ω–æ–∂–∏—Ç–µ–ª—å –º–∞—Å—à—Ç–∞–±–∞ (2.0 = —É–≤–µ–ª–∏—á–∏—Ç—å –≤ 2 —Ä–∞–∑–∞)
 * @returns {Buffer} –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π GLB —Ñ–∞–π–ª
 */
function scaleGLB(glbBuffer, scaleFactor = 2.0) {
  try {
    // GLB —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
    // [0-11] Header: magic (0x46546C67), version (2), length
    // [12-15] JSON chunk size
    // [16-19] JSON chunk type (0x4E4F534A)
    // [20-...] JSON chunk data
    // [...-...] Binary chunk size
    // [...-...] Binary chunk type (0x004E4942)
    // [...-...] Binary chunk data (–≤–µ—Ä—à–∏–Ω—ã, –∏–Ω–¥–µ–∫—Å—ã, etc)

    if (glbBuffer.length < 20) {
      console.warn('‚ö†Ô∏è GLB —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ');
      return glbBuffer;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ GLB (0x46546C67 = "glTF" –≤ little-endian)
    const magic = glbBuffer.readUInt32LE(0);
    if (magic !== 0x46546C67) {
      console.warn('‚ö†Ô∏è –ù–µ –≤–∞–ª–∏–¥–Ω—ã–π GLB —Ñ–∞–π–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ');
      return glbBuffer;
    }

    console.log(`üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ GLB: multiplier=${scaleFactor}`);

    const version = glbBuffer.readUInt32LE(4);
    const length = glbBuffer.readUInt32LE(8);

    if (version !== 2) {
      console.warn(`‚ö†Ô∏è GLB –≤–µ—Ä—Å–∏—è ${version} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è 2`);
      return glbBuffer;
    }

    let offset = 12;

    // –ß–∏—Ç–∞–µ–º JSON chunk
    const jsonChunkSize = glbBuffer.readUInt32LE(offset);
    offset += 4;
    const jsonChunkType = glbBuffer.readUInt32LE(offset);
    offset += 4;

    if (jsonChunkType !== 0x4E4F534A) { // "JSON"
      console.warn('‚ö†Ô∏è –ü–µ—Ä–≤—ã–π chunk –Ω–µ JSON, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return glbBuffer;
    }

    const jsonData = JSON.parse(glbBuffer.toString('utf8', offset, offset + jsonChunkSize));
    offset += jsonChunkSize;

    console.log('üìÑ JSON chunk –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä:', jsonChunkSize);

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—Å–µ —É–∑–ª—ã –∏ —Å–µ—Ç–∫–∏
    if (jsonData.nodes) {
      for (const node of jsonData.nodes) {
        if (node.translation) {
          node.translation[0] *= scaleFactor;
          node.translation[1] *= scaleFactor;
          node.translation[2] *= scaleFactor;
        }
        if (node.scale) {
          node.scale[0] *= scaleFactor;
          node.scale[1] *= scaleFactor;
          node.scale[2] *= scaleFactor;
        }
      }
    }

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã –≤ –±—É—Ñ–µ—Ä–∞—Ö
    if (jsonData.meshes) {
      for (const mesh of jsonData.meshes) {
        if (mesh.primitives) {
          for (const primitive of mesh.primitives) {
            if (primitive.attributes?.POSITION !== undefined) {
              primitive.attributes.POSITION_SCALE = scaleFactor;
            }
          }
        }
      }
    }

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    if (jsonData.animations) {
      for (const animation of jsonData.animations) {
        if (animation.channels) {
          for (const channel of animation.channels) {
            if (channel.target?.path === 'translation') {
              // –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –Ω—É–∂–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
              channel.translation_scale = scaleFactor;
            }
          }
        }
      }
    }

    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º JSON chunk
    const newJsonBuffer = Buffer.from(JSON.stringify(jsonData), 'utf8');
    const newJsonChunkSize = newJsonBuffer.length;

    console.log(`üìù –ù–æ–≤—ã–π JSON chunk —Ä–∞–∑–º–µ—Ä: ${newJsonChunkSize} (–±—ã–ª–æ ${jsonChunkSize})`);

    // –ß–∏—Ç–∞–µ–º Binary chunk
    const binaryChunkSize = glbBuffer.readUInt32LE(offset);
    offset += 4;
    const binaryChunkType = glbBuffer.readUInt32LE(offset);
    offset += 4;

    if (binaryChunkType !== 0x004E4942) { // "BIN\0"
      console.warn('‚ö†Ô∏è Binary chunk –Ω–µ –Ω–∞–π–¥–µ–Ω');
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º JSON
      return rebuildGLB(
        2,
        newJsonBuffer,
        glbBuffer.slice(offset + binaryChunkSize)
      );
    }

    const binaryData = glbBuffer.slice(offset, offset + binaryChunkSize);

    console.log(`üíæ Binary chunk —Ä–∞–∑–º–µ—Ä: ${binaryChunkSize}`);

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤–µ—Ä—à–∏–Ω—ã –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –±—É—Ñ–µ—Ä–µ
    const scaledBinaryData = scaleVertices(binaryData, jsonData, scaleFactor);

    // –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º GLB —Ñ–∞–π–ª
    const newGLB = rebuildGLB(2, newJsonBuffer, scaledBinaryData);

    console.log(`‚úÖ GLB –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω: –±—ã–ª–æ ${glbBuffer.length} –±–∞–π—Ç, —Å—Ç–∞–ª–æ ${newGLB.length} –±–∞–π—Ç`);

    return newGLB;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ GLB:', error.message);
    return glbBuffer; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
  }
}

/**
 * –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –≤–µ—Ä—à–∏–Ω—ã –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –±—É—Ñ–µ—Ä–µ
 */
function scaleVertices(binaryData, jsonData, scaleFactor) {
  try {
    // –ò—â–µ–º POSITION –±—É—Ñ–µ—Ä
    if (!jsonData.meshes) return binaryData;

    const scaledData = Buffer.from(binaryData);
    let positionScaled = false;

    for (const mesh of jsonData.meshes) {
      if (!mesh.primitives) continue;

      for (const primitive of mesh.primitives) {
        const positionAccessorIdx = primitive.attributes?.POSITION;
        if (positionAccessorIdx === undefined) continue;

        const positionAccessor = jsonData.accessors[positionAccessorIdx];
        if (!positionAccessor) continue;

        const bufferViewIdx = positionAccessor.bufferView;
        const bufferView = jsonData.bufferViews[bufferViewIdx];
        const offset = (bufferView.byteOffset || 0) + (positionAccessor.byteOffset || 0);

        // POSITION –æ–±—ã—á–Ω–æ —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–∞–∫ VEC3 (3 float32)
        const stride = bufferView.byteStride || 12;
        const count = positionAccessor.count;

        console.log(`üìç –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º ${count} –≤–µ—Ä—à–∏–Ω –≤ offset ${offset}, stride ${stride}`);

        for (let i = 0; i < count; i++) {
          const vertexOffset = offset + i * stride;

          // –ß–∏—Ç–∞–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º X, Y, Z
          const x = scaledData.readFloatLE(vertexOffset);
          const y = scaledData.readFloatLE(vertexOffset + 4);
          const z = scaledData.readFloatLE(vertexOffset + 8);

          scaledData.writeFloatLE(x * scaleFactor, vertexOffset);
          scaledData.writeFloatLE(y * scaleFactor, vertexOffset + 4);
          scaledData.writeFloatLE(z * scaleFactor, vertexOffset + 8);
        }

        positionScaled = true;
      }
    }

    if (positionScaled) {
      console.log('‚úÖ –í–µ—Ä—à–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω—ã');
    }

    return scaledData;
  } catch (error) {
    console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–µ—Ä—à–∏–Ω:', error.message);
    return binaryData;
  }
}

/**
 * –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç GLB —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ chunk'–∞–º–∏
 */
function rebuildGLB(version, jsonBuffer, binaryBuffer) {
  const header = Buffer.alloc(12);
  header.writeUInt32LE(0x46546C67, 0); // magic "glTF"
  header.writeUInt32LE(version, 4);
  header.writeUInt32LE(12 + 8 + jsonBuffer.length + 8 + binaryBuffer.length, 8);

  const jsonChunkHeader = Buffer.alloc(8);
  jsonChunkHeader.writeUInt32LE(jsonBuffer.length, 0);
  jsonChunkHeader.writeUInt32LE(0x4E4F534A, 4); // "JSON"

  const binaryChunkHeader = Buffer.alloc(8);
  binaryChunkHeader.writeUInt32LE(binaryBuffer.length, 0);
  binaryChunkHeader.writeUInt32LE(0x004E4942, 4); // "BIN\0"

  return Buffer.concat([
    header,
    jsonChunkHeader,
    jsonBuffer,
    binaryChunkHeader,
    binaryBuffer
  ]);
}

module.exports = {
  scaleGLB
};
