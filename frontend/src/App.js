import React, { useState } from 'react';
import './App.css';
import Sidebar from './components/Sidebar';
import Header from './components/Header';
import Footer from './components/Footer';
import ImageUpload from './components/ImageUpload';
import ModelViewer from './components/ModelViewer';
import LoadingSpinner from './components/LoadingSpinner';
import StatusCard from './components/StatusCard';

function App() {
  const [selectedImage, setSelectedImage] = useState(null);
  const [taskId, setTaskId] = useState(null);
  const [taskStatus, setTaskStatus] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState(null);
  const [sidebarOpen, setSidebarOpen] = useState(true);

  const handleImageSelect = (image) => {
    setSelectedImage(image);
    setTaskId(null);
    setTaskStatus(null);
    setError(null);
  };

  const handleGenerate = async (imageFile, dimensions) => {
    setIsGenerating(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('image', imageFile);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
      if (dimensions) {
        formData.append('dimensions', JSON.stringify(dimensions));
      }

      const apiUrl = process.env.REACT_APP_BACKEND_URL || window.location.origin;
      const response = await fetch(`${apiUrl}/api/generation/upload`, {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (data.success) {
        setTaskId(data.taskId);
        setTaskStatus({ status: 'processing', message: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏...' });
        
        // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞
        pollTaskStatus(data.taskId);
      } else {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      }
    } catch (err) {
      setError(err.message);
      setIsGenerating(false);
    }
  };

  const pollTaskStatus = async (currentTaskId) => {
    const poll = async () => {
      try {
        const apiUrl = process.env.REACT_APP_BACKEND_URL || window.location.origin;
        const response = await fetch(`${apiUrl}/api/generation/status/${currentTaskId}`);
        const data = await response.json();

        if (data.success) {
          const task = data.task;
          setTaskStatus({
            status: task.status,
            message: getStatusMessage(task.status),
            result: task.result,
            error: task.error
          });

          if (task.status === 'completed' || task.status === 'failed' || task.status === 'timeout') {
            setIsGenerating(false);
            return;
          }

          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ä–æ—Å
          setTimeout(poll, 2000);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
        setError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
        setIsGenerating(false);
      }
    };

    poll();
  };

  const getStatusMessage = (status) => {
    switch (status) {
      case 'processing':
        return '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏...';
      case 'completed':
        return '3D –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞!';
      case 'failed':
        return '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏';
      case 'timeout':
        return '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
      default:
        return '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
    }
  };

  const handleDownload = () => {
    if (taskId && taskStatus?.status === 'completed') {
      const apiUrl = process.env.REACT_APP_BACKEND_URL || window.location.origin;
      window.open(`${apiUrl}/api/generation/download/${taskId}`, '_blank');
    }
  };

  const handleReset = () => {
    setSelectedImage(null);
    setTaskId(null);
    setTaskStatus(null);
    setIsGenerating(false);
    setError(null);
  };

  const toggleSidebar = () => {
    setSidebarOpen(!sidebarOpen);
  };

  return (
    <div className="App">
      <Sidebar isOpen={sidebarOpen} onToggle={toggleSidebar} />
      
      <div className={`main-layout ${sidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>
        <Header onMenuToggle={toggleSidebar} />

      <main className="app-main">
        <div className="container">
          <div className="workspace">
            <div className="upload-section">
              <ImageUpload
                onImageSelect={handleImageSelect}
                onGenerate={handleGenerate}
                selectedImage={selectedImage}
                isGenerating={isGenerating}
              />
            </div>

            <div className="result-section">
              {isGenerating && (
                <div className="loading-container">
                  <LoadingSpinner />
                  <p className="loading-text">{taskStatus?.message || '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 3D –º–æ–¥–µ–ª–∏...'}</p>
                </div>
              )}

              {taskStatus?.status === 'completed' && taskStatus?.result?.url && (
                <ModelViewer
                  modelUrl={taskStatus.result.url}
                />
              )}

              {!isGenerating && !taskStatus && !error && (
                <div className="placeholder-container">
                  <p className="placeholder-text">üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 3D –º–æ–¥–µ–ª–∏</p>
                </div>
              )}

              {error && (
                <div className="error-container">
                  <p className="error-text">{error}</p>
                </div>
              )}
            </div>
          </div>

          {taskStatus && !isGenerating && (
            <div className="actions-bar">
              <StatusCard
                status={taskStatus.status}
                message={taskStatus.message}
                error={taskStatus.error}
                onDownload={handleDownload}
                onReset={handleReset}
                canDownload={taskStatus.status === 'completed'}
              />
            </div>
          )}
        </div>
      </main>

      <Footer />
      </div>
    </div>
  );
}

export default App;