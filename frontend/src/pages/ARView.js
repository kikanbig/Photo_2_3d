import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getModel } from '../services/api';
import '@google/model-viewer';
import './ARView.css';

const ARView = () => {
  const { modelId } = useParams();
  const navigate = useNavigate();
  const [model, setModel] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modelLoading, setModelLoading] = useState(true);
  const [arScale, setArScale] = useState(100); // –ú–∞—Å—à—Ç–∞–± –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  const [isInAR, setIsInAR] = useState(false);
  const modelViewerRef = useRef(null);

  useEffect(() => {
    loadModel();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [modelId]);

  useEffect(() => {
    const modelViewer = modelViewerRef.current;
    if (modelViewer && model) {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º src —á–µ—Ä–µ–∑ setAttribute
      console.log('üé® Setting model src:', model.modelUrl);
      modelViewer.setAttribute('src', model.modelUrl);
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Scene Viewer —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Google
      const title = model.name || '3D Model';
      const link = window.location.href;
      
      modelViewer.setAttribute('alt', title);
      modelViewer.setAttribute('ar-scale', arScaleAttr);
      
      // –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Intent URL –¥–ª—è Scene Viewer
      const sceneViewerUrl = new URL('https://arvr.google.com/scene-viewer/1.1');
      sceneViewerUrl.searchParams.set('file', model.modelUrl);
      sceneViewerUrl.searchParams.set('mode', 'ar_preferred');
      sceneViewerUrl.searchParams.set('title', title);
      sceneViewerUrl.searchParams.set('link', link);
      sceneViewerUrl.searchParams.set('resizable', 'true'); // !!!–ö–õ–Æ–ß–ï–í–û–ô –ü–ê–†–ê–ú–ï–¢–†!!!
      sceneViewerUrl.searchParams.set('enable_vertical_placement', 'true');
      
      console.log('üì± Scene Viewer URL:', sceneViewerUrl.toString());
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π Intent –¥–ª—è Android
      if (modelViewer.canActivateAR) {
        modelViewer.activateAR();
      }
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º WebXR DOM Overlay
      if (navigator.xr) {
        console.log('‚úÖ WebXR –¥–æ—Å—Ç—É–ø–µ–Ω');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É DOM Overlay
        navigator.xr.isSessionSupported('immersive-ar').then((supported) => {
          if (supported) {
            console.log('‚úÖ AR —Å–µ—Å—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º overlay —ç–ª–µ–º–µ–Ω—Ç
            const overlayElement = document.getElementById('ar-scale-info');
            if (overlayElement) {
              console.log('‚úÖ Overlay —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω');
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ overlay –¥–ª—è model-viewer
              modelViewer.xrEnvironment = true;
            }
          } else {
            console.log('‚ö†Ô∏è AR —Å–µ—Å—Å–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
          }
        });
      } else {
        console.log('‚ö†Ô∏è WebXR –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ load –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
      const timeout = setTimeout(() => {
        console.log('‚è±Ô∏è Timeout: Force hiding loading overlay');
        setModelLoading(false);
      }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
      
      const handleLoad = () => {
        console.log('‚úÖ Model loaded successfully - hiding overlay');
        console.log('üìê Model viewer dimensions:', {
          width: modelViewer.clientWidth,
          height: modelViewer.clientHeight,
          offsetWidth: modelViewer.offsetWidth,
          offsetHeight: modelViewer.offsetHeight,
          scrollWidth: modelViewer.scrollWidth,
          scrollHeight: modelViewer.scrollHeight,
          parentWidth: modelViewer.parentElement?.clientWidth,
          parentHeight: modelViewer.parentElement?.clientHeight
        });
        console.log('üé• Camera orbit:', modelViewer.getCameraOrbit());
        console.log('üéØ Camera target:', modelViewer.getCameraTarget());
        console.log('üîç Field of view:', modelViewer.fieldOfView);
        console.log('üì¶ Model bounds:', modelViewer.getBoundingBoxCenter());
        
        clearTimeout(timeout);
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–∫—Ä—ã–≤–∞–µ–º overlay —Å—Ä–∞–∑—É!
        setModelLoading(false);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º
        setTimeout(() => {
          if (modelViewer) {
            console.log('üîÑ Resetting camera and forcing render...');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –∫ –º–æ–¥–µ–ª–∏
            modelViewer.resetTurntableRotation();
            modelViewer.jumpCameraToGoal();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
            if (modelViewer.updateFraming) {
              modelViewer.updateFraming();
            }
            
            // –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ-–≤—Ä–∞—â–µ–Ω–∏–µ
            modelViewer.play();
            
            console.log('‚ú® Camera reset complete');
            console.log('üé• New camera orbit:', modelViewer.getCameraOrbit());
          }
        }, 100);
      };
      
      const handleError = (event) => {
        console.error('‚ùå Model failed to load:', event);
        clearTimeout(timeout);
        setModelLoading(false);
      };
      
      const handleProgress = (event) => {
        const progress = event.detail.totalProgress;
        console.log(`üìä Loading: ${(progress * 100).toFixed(1)}%`);
        
        // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å 100% (–∏–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ), —Å–∫—Ä—ã–≤–∞–µ–º overlay
        if (progress >= 0.99) {
          console.log('‚úÖ Progress 99%+ - hiding overlay');
          clearTimeout(timeout);
          setModelLoading(false);
        }
      };

      const handleArStatusChange = (event) => {
        console.log('üéØ AR Status event:', event);
        console.log('üéØ AR Status:', modelViewer.arStatus);
        
        const isInArMode = modelViewer.arStatus === 'session-started' || 
                           modelViewer.arStatus === 'object-placed';
        
        console.log('üéØ Is in AR mode:', isInArMode);
        setIsInAR(isInArMode);
      };
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º AR –∫–ª–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Scene Viewer
      const handleArClick = (event) => {
        console.log('üéØ AR button clicked');
        
        // –î–ª—è Android Scene Viewer –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (modelViewer && model.dimensions) {
          const sceneViewerParams = {
            resizable: true,
            enable_vertical_placement: true,
            disable_occlusion: false,
            title: model.name || '3D Model',
            link: window.location.href
          };
          
          console.log('üì± Scene Viewer params:', sceneViewerParams);
          
          // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ model-viewer –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          // –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
        }
      };
      
      // WebXR Session started - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º overlay
      const handleSessionStart = async (event) => {
        console.log('üöÄ WebXR Session started!');
        setIsInAR(true);
        
        const session = event.detail?.session || modelViewer.xrSession;
        if (session) {
          console.log('‚úÖ XR Session –ø–æ–ª—É—á–µ–Ω–∞');
          
          // –ü–æ–ª—É—á–∞–µ–º overlay —ç–ª–µ–º–µ–Ω—Ç
          const overlayElement = document.getElementById('ar-scale-info');
          if (overlayElement) {
            console.log('‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º overlay –≤ WebXR');
            overlayElement.style.display = 'flex';
          }
        }
      };
      
      const handleSessionEnd = () => {
        console.log('üõë WebXR Session ended');
        setIsInAR(false);
      };

      const handleScaleChange = () => {
        try {
          // –í AR —Ä–µ–∂–∏–º–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ transform
          const updateScale = () => {
            if (modelViewer.arScale) {
              console.log('üìè AR Scale:', modelViewer.arScale);
            }
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            if (modelViewer.scale) {
              const scale = parseFloat(modelViewer.scale);
              const scalePercent = Math.round(scale * 100);
              setArScale(scalePercent);
              console.log('üìè Scale changed:', scalePercent + '%');
            }
          };
          
          updateScale();
        } catch (e) {
          console.log('Scale change error:', e);
        }
      };
      
      // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞ –≤ AR
      const scaleInterval = setInterval(() => {
        if (isInAR && modelViewer) {
          handleScaleChange();
        }
      }, 500); // –ö–∞–∂–¥—ã–µ 500–º—Å

      modelViewer.addEventListener('load', handleLoad);
      modelViewer.addEventListener('error', handleError);
      modelViewer.addEventListener('progress', handleProgress);
      modelViewer.addEventListener('ar-status', handleArStatusChange);
      modelViewer.addEventListener('scale-change', handleScaleChange);
      
      // WebXR —Å–æ–±—ã—Ç–∏—è
      modelViewer.addEventListener('ar-session-start', handleSessionStart);
      modelViewer.addEventListener('ar-session-end', handleSessionEnd);
      
      // AR button click
      const arButton = modelViewer.querySelector('[slot="ar-button"]');
      if (arButton) {
        arButton.addEventListener('click', handleArClick);
      }

      return () => {
        clearTimeout(timeout);
        clearInterval(scaleInterval);
        modelViewer.removeEventListener('load', handleLoad);
        modelViewer.removeEventListener('error', handleError);
        modelViewer.removeEventListener('progress', handleProgress);
        modelViewer.removeEventListener('ar-status', handleArStatusChange);
        modelViewer.removeEventListener('scale-change', handleScaleChange);
        modelViewer.removeEventListener('ar-session-start', handleSessionStart);
        modelViewer.removeEventListener('ar-session-end', handleSessionEnd);
        if (arButton) {
          arButton.removeEventListener('click', handleArClick);
        }
      };
    }
  }, [model, isInAR]);

  const loadModel = async () => {
    try {
      setLoading(true);
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏:', modelId);
      
      const data = await getModel(modelId);
      console.log('–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data);
      
      if (!data || !data.modelUrl) {
        throw new Error('URL –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      setModel(data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', err);
      setError(`–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="ar-view-page loading">
        <div className="ar-loading">
          <div className="spinner">
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
          </div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...</p>
        </div>
      </div>
    );
  }

  if (error || !model) {
    return (
      <div className="ar-view-page error">
        <div className="ar-error">
          <h2>‚ùå {error || '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}</h2>
          <p>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
          <ul style={{ textAlign: 'left', marginBottom: '1.5rem' }}>
            <li>–ú–æ–¥–µ–ª—å –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</li>
            <li>–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–æ–¥–µ–ª–∏ –≤ QR –∫–æ–¥–µ</li>
            <li>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞</li>
          </ul>
          <p style={{ fontSize: '0.9rem', marginBottom: '2rem' }}>
            ID –º–æ–¥–µ–ª–∏: <code style={{ 
              background: 'rgba(255,255,255,0.1)', 
              padding: '0.25rem 0.5rem', 
              borderRadius: '4px',
              fontSize: '0.85rem'
            }}>{modelId}</code>
          </p>
          <button 
            className="btn" 
            onClick={() => navigate('/')}
            style={{
              background: 'linear-gradient(135deg, #5744e2 0%, #8b5cf6 100%)',
              color: 'white',
              border: 'none',
              padding: '0.875rem 1.5rem',
              borderRadius: '12px',
              fontSize: '1rem',
              fontWeight: '600',
              cursor: 'pointer'
            }}
          >
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è AR - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± (—Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
  const arScaleAttr = model.dimensions 
    ? `${model.dimensions.length / 1000} ${model.dimensions.width / 1000} ${model.dimensions.height / 1000}` 
    : 'auto';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getDimensionsText = () => {
    if (!model.dimensions) return '–†–∞–∑–º–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    const { length, width, height, unit } = model.dimensions;
    return `${length} √ó ${width} √ó ${height} ${unit}`;
  };

  return (
    <div className="ar-view-page">
      <div className="ar-header">
        <h1>{model.name}</h1>
        {model.dimensions && (
          <p className="ar-dimensions">
            {model.dimensions.length} √ó {model.dimensions.width} √ó {model.dimensions.height} {model.dimensions.unit}
          </p>
        )}
      </div>

      <div className="ar-viewer-container">
        {modelLoading && (
          <div 
            className="model-loading-overlay"
            onClick={() => {
              console.log('Overlay clicked - force hide');
              setModelLoading(false);
            }}
          >
            <div className="spinner">
              <div className="spinner-ring"></div>
              <div className="spinner-ring"></div>
              <div className="spinner-ring"></div>
            </div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ 3D –º–æ–¥–µ–ª–∏...</p>
            <p style={{ fontSize: '0.85rem', opacity: 0.7, marginTop: '1rem' }}>
              –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            </p>
          </div>
        )}

        {/* –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ - –í–°–ï–ì–î–ê –≤–∏–¥–Ω–∞ */}
        {model.dimensions && (
          <div className="ar-dimensions-card">
            <div className="dimensions-header">
              <span className="dimensions-icon">üìè</span>
              <span className="dimensions-title">–†–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã</span>
            </div>
            <div className="dimensions-values">
              <div className="dimension-item">
                <span className="dimension-label">–î–ª–∏–Ω–∞:</span>
                <span className="dimension-value">{model.dimensions.length} {model.dimensions.unit}</span>
              </div>
              <div className="dimension-item">
                <span className="dimension-label">–®–∏—Ä–∏–Ω–∞:</span>
                <span className="dimension-value">{model.dimensions.width} {model.dimensions.unit}</span>
              </div>
              <div className="dimension-item">
                <span className="dimension-label">–í—ã—Å–æ—Ç–∞:</span>
                <span className="dimension-value">{model.dimensions.height} {model.dimensions.unit}</span>
              </div>
            </div>
            <div className="dimensions-hint">
              üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∂–µ—Å—Ç ¬´—â–∏–ø–æ–∫¬ª –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≤ AR
            </div>
          </div>
        )}
        
        <model-viewer
          ref={modelViewerRef}
          ar
          ar-modes="scene-viewer webxr quick-look"
          camera-controls
          touch-action="pan-y"
          auto-rotate
          auto-rotate-delay="0"
          rotation-per-second="30deg"
          shadow-intensity="1"
          environment-image="neutral"
          exposure="2"
          ar-scale={arScaleAttr}
          ar-placement="floor"
          ios-src={model.modelUrl}
          loading="eager"
          reveal="auto"
          camera-orbit="45deg 75deg 2m"
          field-of-view="45deg"
          min-camera-orbit="auto auto auto"
          max-camera-orbit="auto auto auto"
          interpolation-decay="100"
          alt={model.name || '3D Model'}
        >
          <button slot="ar-button" className="ar-button">
            üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ AR
          </button>
          
          <div className="ar-prompt" slot="ar-prompt">
            <div className="ar-prompt-content">
              <div className="ar-icon">üì±</div>
              <h2>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏</h2>
              <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–¥–µ–ª—å –≤ –≤–∞—à–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</p>
            </div>
          </div>

        </model-viewer>
        
        {/* Floating AR info - –¥–ª—è WebXR —Ä–µ–∂–∏–º–∞ */}
        <div id="ar-scale-info" style={{
          position: 'fixed',
          top: '20px',
          left: '50%',
          transform: 'translateX(-50%)',
          zIndex: 99999,
          pointerEvents: 'none',
          display: isInAR ? 'flex' : 'none',
          flexDirection: 'column',
          alignItems: 'center',
          gap: '12px',
          maxWidth: '90%',
          fontFamily: 'system-ui, -apple-system, sans-serif'
        }}>
          <div style={{
            display: 'flex',
            alignItems: 'center',
            gap: '12px',
            background: 'rgba(0, 0, 0, 0.85)',
            backdropFilter: 'blur(10px)',
            padding: '12px 20px',
            borderRadius: '20px',
            border: '2px solid rgba(87, 68, 226, 0.6)',
            boxShadow: '0 8px 24px rgba(0, 0, 0, 0.5)'
          }}>
            <div style={{ fontSize: '1.75rem' }}>üìè</div>
            <div style={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'flex-start',
              gap: '2px'
            }}>
              <div style={{
                fontSize: '1.5rem',
                fontWeight: '700',
                color: '#ffffff',
                lineHeight: 1
              }}>
                {arScale}%
              </div>
              <div style={{
                fontSize: '0.75rem',
                color: 'rgba(255, 255, 255, 0.7)',
                textTransform: 'uppercase',
                letterSpacing: '0.5px'
              }}>
                –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
              </div>
              {model.dimensions && (
                <div style={{
                  fontSize: '0.85rem',
                  color: 'rgba(139, 92, 246, 1)',
                  marginTop: '4px',
                  fontWeight: '500'
                }}>
                  –†–µ–∞–ª—å–Ω—ã–π: {getDimensionsText()}
                </div>
              )}
            </div>
          </div>
          <div style={{
            background: 'rgba(0, 0, 0, 0.75)',
            backdropFilter: 'blur(10px)',
            padding: '8px 16px',
            borderRadius: '12px',
            fontSize: '0.85rem',
            color: 'rgba(255, 255, 255, 0.8)'
          }}>
            –ñ–µ—Å—Ç ¬´—â–∏–ø–æ–∫¬ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
          </div>
        </div>
      </div>

      <div className="ar-instructions">
        <h3>üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</h3>
        <ol>
          <li><strong>–ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</strong> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ AR" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏</li>
          <li><strong>–î–µ—Å–∫—Ç–æ–ø:</strong> –í—Ä–∞—â–∞–π—Ç–µ –º—ã—à—å—é, –∑—É–º–∏—Ä—É–π—Ç–µ –∫–æ–ª—ë—Å–∏–∫–æ–º</li>
          <li><strong>AR –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:</strong> –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –º–æ–¥–µ–ª—å</li>
        </ol>
        
        <div className="ar-compatibility">
          <p>‚úÖ iOS 12+ (Quick Look)</p>
          <p>‚úÖ Android 7.0+ (Scene Viewer)</p>
          <p>üíª Desktop (Preview only)</p>
        </div>
      </div>
    </div>
  );
};

export default ARView;

