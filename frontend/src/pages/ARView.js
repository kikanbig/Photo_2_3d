import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getModel } from '../services/api';
import '@google/model-viewer';
import './ARView.css';

const ARView = () => {
  const { modelId } = useParams();
  const navigate = useNavigate();
  const [model, setModel] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    loadModel();
  }, [modelId]);

  const loadModel = async () => {
    try {
      setLoading(true);
      const data = await getModel(modelId);
      setModel(data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', err);
      setError('–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="ar-view-page loading">
        <div className="ar-loading">
          <div className="spinner">
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
          </div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...</p>
        </div>
      </div>
    );
  }

  if (error || !model) {
    return (
      <div className="ar-view-page error">
        <div className="ar-error">
          <h2>‚ùå {error || '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}</h2>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ QR –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</p>
          <button className="btn" onClick={() => navigate('/')}>
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è AR
  const arScale = model.dimensions 
    ? `${model.dimensions.length / 1000} ${model.dimensions.width / 1000} ${model.dimensions.height / 1000}` 
    : 'auto';

  return (
    <div className="ar-view-page">
      <div className="ar-header">
        <h1>{model.name}</h1>
        {model.dimensions && (
          <p className="ar-dimensions">
            {model.dimensions.length} √ó {model.dimensions.width} √ó {model.dimensions.height} {model.dimensions.unit}
          </p>
        )}
      </div>

      <div className="ar-viewer-container">
        <model-viewer
          src={model.modelUrl}
          alt={model.name}
          ar
          ar-modes="webxr scene-viewer quick-look"
          camera-controls
          auto-rotate
          shadow-intensity="1"
          environment-image="neutral"
          exposure="1"
          ar-scale={arScale}
          ios-src={model.modelUrl}
          style={{
            width: '100%',
            height: '100%',
            backgroundColor: '#0a0a0f'
          }}
        >
          <button slot="ar-button" className="ar-button">
            üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ AR
          </button>
          
          <div className="ar-prompt" slot="ar-prompt">
            <div className="ar-prompt-content">
              <div className="ar-icon">üì±</div>
              <h2>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏</h2>
              <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–¥–µ–ª—å –≤ –≤–∞—à–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</p>
            </div>
          </div>
        </model-viewer>
      </div>

      <div className="ar-instructions">
        <h3>üì± –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AR:</h3>
        <ol>
          <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ AR"</li>
          <li>–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ —Ä–æ–≤–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å</li>
          <li>–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ—Å—Ç–∏</li>
          <li>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏</li>
          <li>–î–≤–∏–≥–∞–π—Ç–µ –º–æ–¥–µ–ª—å –ø–∞–ª—å—Ü–∞–º–∏</li>
        </ol>
        
        <div className="ar-compatibility">
          <p>‚úÖ iOS 12+ (Quick Look)</p>
          <p>‚úÖ Android 7.0+ (Scene Viewer)</p>
        </div>
      </div>
    </div>
  );
};

export default ARView;

