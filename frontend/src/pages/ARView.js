import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getModel } from '../services/api';
import '@google/model-viewer';
import './ARView.css';

const ARView = () => {
  const { modelId } = useParams();
  const navigate = useNavigate();
  const [model, setModel] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [modelLoading, setModelLoading] = useState(true);
  const [arScale, setArScale] = useState(100); // –ú–∞—Å—à—Ç–∞–± –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  const [isInAR, setIsInAR] = useState(false);
  const modelViewerRef = useRef(null);

  useEffect(() => {
    loadModel();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [modelId]);

  useEffect(() => {
    const modelViewer = modelViewerRef.current;
    if (modelViewer && model) {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º src —á–µ—Ä–µ–∑ setAttribute
      console.log('üé® Setting model src:', model.modelUrl);
      modelViewer.setAttribute('src', model.modelUrl);
      modelViewer.setAttribute('alt', model.name || 'AR Model');
      
      // –¢–∞–π–º–∞—É—Ç –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ load –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
      const timeout = setTimeout(() => {
        console.log('‚è±Ô∏è Timeout: Force hiding loading overlay');
        setModelLoading(false);
      }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
      
      const handleLoad = () => {
        console.log('‚úÖ Model loaded successfully - hiding overlay');
        console.log('üìê Model viewer dimensions:', {
          width: modelViewer.clientWidth,
          height: modelViewer.clientHeight,
          offsetWidth: modelViewer.offsetWidth,
          offsetHeight: modelViewer.offsetHeight,
          scrollWidth: modelViewer.scrollWidth,
          scrollHeight: modelViewer.scrollHeight,
          parentWidth: modelViewer.parentElement?.clientWidth,
          parentHeight: modelViewer.parentElement?.clientHeight
        });
        console.log('üé• Camera orbit:', modelViewer.getCameraOrbit());
        console.log('üéØ Camera target:', modelViewer.getCameraTarget());
        console.log('üîç Field of view:', modelViewer.fieldOfView);
        console.log('üì¶ Model bounds:', modelViewer.getBoundingBoxCenter());
        
        clearTimeout(timeout);
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: —Å–∫—Ä—ã–≤–∞–µ–º overlay —Å—Ä–∞–∑—É!
        setModelLoading(false);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º
        setTimeout(() => {
          if (modelViewer) {
            console.log('üîÑ Resetting camera and forcing render...');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–º–µ—Ä—É –∫ –º–æ–¥–µ–ª–∏
            modelViewer.resetTurntableRotation();
            modelViewer.jumpCameraToGoal();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
            if (modelViewer.updateFraming) {
              modelViewer.updateFraming();
            }
            
            // –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ-–≤—Ä–∞—â–µ–Ω–∏–µ
            modelViewer.play();
            
            console.log('‚ú® Camera reset complete');
            console.log('üé• New camera orbit:', modelViewer.getCameraOrbit());
          }
        }, 100);
      };
      
      const handleError = (event) => {
        console.error('‚ùå Model failed to load:', event);
        clearTimeout(timeout);
        setModelLoading(false);
      };
      
      const handleProgress = (event) => {
        const progress = event.detail.totalProgress;
        console.log(`üìä Loading: ${(progress * 100).toFixed(1)}%`);
        
        // –ï—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å 100% (–∏–ª–∏ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ), —Å–∫—Ä—ã–≤–∞–µ–º overlay
        if (progress >= 0.99) {
          console.log('‚úÖ Progress 99%+ - hiding overlay');
          clearTimeout(timeout);
          setModelLoading(false);
        }
      };

      const handleArStatusChange = (event) => {
        console.log('üéØ AR Status event:', event);
        console.log('üéØ AR Status:', modelViewer.arStatus);
        
        const isInArMode = modelViewer.arStatus === 'session-started' || 
                           modelViewer.arStatus === 'object-placed' ||
                           modelViewer.arStatus === 'not-presenting';
        
        console.log('üéØ Is in AR mode:', isInArMode);
        setIsInAR(isInArMode);
        
        // –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (modelViewer.arStatus) {
          console.log('‚úÖ AR –∞–∫—Ç–∏–≤–µ–Ω, –≤–∫–ª—é—á–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä');
          setIsInAR(true);
        }
      };

      const handleScaleChange = () => {
        try {
          if (modelViewer.scale) {
            const scale = parseFloat(modelViewer.scale);
            const scalePercent = Math.round(scale * 100);
            setArScale(scalePercent);
            console.log('üìè Scale changed:', scalePercent + '%');
          }
        } catch (e) {
          console.log('Scale change error:', e);
        }
      };

      modelViewer.addEventListener('load', handleLoad);
      modelViewer.addEventListener('error', handleError);
      modelViewer.addEventListener('progress', handleProgress);
      modelViewer.addEventListener('ar-status', handleArStatusChange);
      modelViewer.addEventListener('scale-change', handleScaleChange);

      return () => {
        clearTimeout(timeout);
        modelViewer.removeEventListener('load', handleLoad);
        modelViewer.removeEventListener('error', handleError);
        modelViewer.removeEventListener('progress', handleProgress);
        modelViewer.removeEventListener('ar-status', handleArStatusChange);
        modelViewer.removeEventListener('scale-change', handleScaleChange);
      };
    }
  }, [model]);

  const loadModel = async () => {
    try {
      setLoading(true);
      console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏:', modelId);
      
      const data = await getModel(modelId);
      console.log('–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', data);
      
      if (!data || !data.modelUrl) {
        throw new Error('URL –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      setModel(data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:', err);
      setError(`–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="ar-view-page loading">
        <div className="ar-loading">
          <div className="spinner">
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
            <div className="spinner-ring"></div>
          </div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...</p>
        </div>
      </div>
    );
  }

  if (error || !model) {
    return (
      <div className="ar-view-page error">
        <div className="ar-error">
          <h2>‚ùå {error || '–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}</h2>
          <p>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</p>
          <ul style={{ textAlign: 'left', marginBottom: '1.5rem' }}>
            <li>–ú–æ–¥–µ–ª—å –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</li>
            <li>–ù–µ–≤–µ—Ä–Ω—ã–π ID –º–æ–¥–µ–ª–∏ –≤ QR –∫–æ–¥–µ</li>
            <li>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞</li>
          </ul>
          <p style={{ fontSize: '0.9rem', marginBottom: '2rem' }}>
            ID –º–æ–¥–µ–ª–∏: <code style={{ 
              background: 'rgba(255,255,255,0.1)', 
              padding: '0.25rem 0.5rem', 
              borderRadius: '4px',
              fontSize: '0.85rem'
            }}>{modelId}</code>
          </p>
          <button 
            className="btn" 
            onClick={() => navigate('/')}
            style={{
              background: 'linear-gradient(135deg, #5744e2 0%, #8b5cf6 100%)',
              color: 'white',
              border: 'none',
              padding: '0.875rem 1.5rem',
              borderRadius: '12px',
              fontSize: '1rem',
              fontWeight: '600',
              cursor: 'pointer'
            }}
          >
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è AR - –Ω–∞—á–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± (—Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
  const arScaleAttr = model.dimensions 
    ? `${model.dimensions.length / 1000} ${model.dimensions.width / 1000} ${model.dimensions.height / 1000}` 
    : 'auto';
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getDimensionsText = () => {
    if (!model.dimensions) return '–†–∞–∑–º–µ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã';
    const { length, width, height, unit } = model.dimensions;
    return `${length} √ó ${width} √ó ${height} ${unit}`;
  };

  return (
    <div className="ar-view-page">
      <div className="ar-header">
        <h1>{model.name}</h1>
        {model.dimensions && (
          <p className="ar-dimensions">
            {model.dimensions.length} √ó {model.dimensions.width} √ó {model.dimensions.height} {model.dimensions.unit}
          </p>
        )}
      </div>

      <div className="ar-viewer-container">
        {modelLoading && (
          <div 
            className="model-loading-overlay"
            onClick={() => {
              console.log('Overlay clicked - force hide');
              setModelLoading(false);
            }}
          >
            <div className="spinner">
              <div className="spinner-ring"></div>
              <div className="spinner-ring"></div>
              <div className="spinner-ring"></div>
            </div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ 3D –º–æ–¥–µ–ª–∏...</p>
            <p style={{ fontSize: '0.85rem', opacity: 0.7, marginTop: '1rem' }}>
              –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            </p>
          </div>
        )}

        {/* AR Scale Indicator - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö model-viewer */}
        <div className="ar-scale-indicator" style={{ display: isInAR ? 'flex' : 'none' }}>
          <div className="ar-scale-badge">
            <div className="ar-scale-icon">üìè</div>
            <div className="ar-scale-info">
              <div className="ar-scale-percent">{arScale}%</div>
              <div className="ar-scale-label">–æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞</div>
              {model.dimensions && (
                <div className="ar-scale-dimensions">
                  –†–µ–∞–ª—å–Ω—ã–π: {getDimensionsText()}
                </div>
              )}
            </div>
          </div>
          <div className="ar-scale-hint">
            –ñ–µ—Å—Ç ¬´—â–∏–ø–æ–∫¬ª –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞—Å—à—Ç–∞–±–∞
          </div>
        </div>

        {/* –¢–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ */}
        {!isInAR && (
          <button 
            style={{
              position: 'absolute',
              top: '20px',
              right: '20px',
              padding: '10px 20px',
              background: 'rgba(87, 68, 226, 0.9)',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              zIndex: 1001,
              fontSize: '14px',
              fontWeight: '600'
            }}
            onClick={() => {
              console.log('üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞');
              setIsInAR(true);
              setArScale(150);
            }}
          >
            –¢–µ—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
          </button>
        )}
        
        <model-viewer
          ref={modelViewerRef}
          ar
          ar-modes="webxr scene-viewer quick-look"
          camera-controls
          touch-action="pan-y"
          auto-rotate
          auto-rotate-delay="0"
          rotation-per-second="30deg"
          shadow-intensity="1"
          environment-image="neutral"
          exposure="2"
          ar-scale={arScaleAttr}
          ios-src={model.modelUrl}
          loading="eager"
          reveal="auto"
          camera-orbit="45deg 75deg 2m"
          field-of-view="45deg"
          min-camera-orbit="auto auto auto"
          max-camera-orbit="auto auto auto"
          interpolation-decay="100"
        >
          <button slot="ar-button" className="ar-button">
            üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ AR
          </button>
          
          <div className="ar-prompt" slot="ar-prompt">
            <div className="ar-prompt-content">
              <div className="ar-icon">üì±</div>
              <h2>–ü—Ä–æ—Å–º–æ—Ç—Ä –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏</h2>
              <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–¥–µ–ª—å –≤ –≤–∞—à–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ</p>
            </div>
          </div>
        </model-viewer>
      </div>

      <div className="ar-instructions">
        <h3>üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</h3>
        <ol>
          <li><strong>–ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</strong> –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ AR" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏</li>
          <li><strong>–î–µ—Å–∫—Ç–æ–ø:</strong> –í—Ä–∞—â–∞–π—Ç–µ –º—ã—à—å—é, –∑—É–º–∏—Ä—É–π—Ç–µ –∫–æ–ª—ë—Å–∏–∫–æ–º</li>
          <li><strong>AR –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ:</strong> –ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç–µ –º–æ–¥–µ–ª—å</li>
        </ol>
        
        <div className="ar-compatibility">
          <p>‚úÖ iOS 12+ (Quick Look)</p>
          <p>‚úÖ Android 7.0+ (Scene Viewer)</p>
          <p>üíª Desktop (Preview only)</p>
        </div>
      </div>
    </div>
  );
};

export default ARView;

